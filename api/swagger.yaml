---
swagger: "2.0"
info:
  description: "An API to build, play and teach bricks"
  version: "1.0.0"
  title: "Brillder"
  termsOfService: ""
  contact:
    email: "lindsaymacvean@scholar6.org"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "swagger.scholar6.org"
tags:
- name: "brick"
  description: "Bricks functionality"
schemes:
- "https"
- "http"
paths:
  /auth/login:
    post:
      tags:
      - "auth"
      summary: "Login user"
      operationId: "authLoginPOST"
      parameters:
      - in: "body"
        name: "body"
        description: "User password"
        required: true
        schema:
          $ref: "#/definitions/body"
      responses:
        "200":
          description: "ok"
      x-swagger-router-controller: "Auth"
  /auth/login/:userType:
    post:
      tags:
      - "auth"
      summary: "Login user"
      operationId: "authLoginuserTypePOST"
      parameters:
      - in: "body"
        name: "body"
        description: "User password"
        required: true
        schema:
          $ref: "#/definitions/body_1"
      responses:
        "200":
          description: "ok"
      x-swagger-router-controller: "Auth"
  /auth/signUp:
    post:
      tags:
      - "auth"
      summary: "Login user"
      operationId: "authSignUpPOST"
      parameters:
      - in: "body"
        name: "body"
        description: "User password"
        required: true
        schema:
          $ref: "#/definitions/body_2"
      responses:
        "200":
          description: "ok"
      x-swagger-router-controller: "Auth"
  /auth/logout:
    post:
      tags:
      - "auth"
      summary: "Login out current user"
      operationId: "authLogoutPOST"
      parameters: []
      responses:
        "200":
          description: "ok"
      x-swagger-router-controller: "Auth"
  /auth/google/login/{returnUrl}:
    get:
      tags:
      - "auth"
      summary: "Login by Google"
      operationId: "authGoogleLoginReturnUrlGET"
      parameters:
      - name: "returnUrl"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "ok"
      x-swagger-router-controller: "Auth"
  /fileUpload:
    post:
      tags:
      - "file"
      summary: "Uploads a file."
      operationId: "fileUploadPOST"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "file"
        in: "formData"
        description: "The file to upload."
        required: false
        type: "file"
      responses:
        "200":
          description: "ok"
      x-swagger-router-controller: "File"
  /user/tutorialShowed:
    put:
      tags:
      - "user"
      summary: "Mark tutoria as showed for current user"
      operationId: "userTutorialShowedPUT"
      parameters: []
      responses:
        "200":
          description: "ok"
      x-swagger-router-controller: "User"
  /user/current:
    get:
      tags:
      - "user"
      summary: "Get user by id"
      operationId: "userCurrentGET"
      parameters: []
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/User"
      x-swagger-router-controller: "User"
  /user/:userId:
    get:
      tags:
      - "user"
      summary: "Get current user"
      operationId: "useruserIdGET"
      parameters: []
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/User"
      x-swagger-router-controller: "User"
  /play/brickSummary/:brickId:
    get:
      tags:
      - "play"
      summary: "Get brick summary"
      operationId: "playBrickSummarybrickIdGET"
      parameters: []
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/BrickSummaryModel"
      x-swagger-router-controller: "Play"
  /play/attempts:
    get:
      tags:
      - "play"
      summary: "Get all attempts"
      operationId: "playAttemptsGET"
      parameters: []
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/ArrayOfBrickAttempts"
      x-swagger-router-controller: "Play"
  /play/attempt:
    post:
      tags:
      - "play"
      summary: "Create attempt"
      operationId: "playAttemptPOST"
      parameters:
      - in: "body"
        name: "body"
        description: "BrickAttempt object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/BrickAttempt"
      responses:
        "200":
          description: "ok"
      x-swagger-router-controller: "Play"
    put:
      tags:
      - "play"
      summary: "Update attempt"
      operationId: "playAttemptPUT"
      parameters:
      - in: "body"
        name: "body"
        description: "BrickAttempt model object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/BrickAttemptUpdateModel"
      responses:
        "200":
          description: "ok"
      x-swagger-router-controller: "Play"
  /bricks:
    get:
      tags:
      - "brick"
      summary: "Get all bricks"
      operationId: "bricksGET"
      parameters: []
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/ArrayOfBricks"
      x-swagger-router-controller: "Brick"
  /bricks/byStatus/{status}:
    get:
      tags:
      - "brick"
      summary: "Get all bricks"
      operationId: "bricksByStatusStatusGET"
      parameters:
      - name: "status"
        in: "path"
        required: true
        type: "integer"
        enum:
        - 1
        - 2
        - 3
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/ArrayOfBricks"
      x-swagger-router-controller: "Brick"
  /bricks/currentUser:
    get:
      tags:
      - "brick"
      summary: "Get all bricks of current user"
      operationId: "bricksCurrentUserGET"
      parameters: []
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/ArrayOfBricks"
      x-swagger-router-controller: "Brick"
  /brick/{id}:
    get:
      tags:
      - "brick"
      summary: "Get specific brick by id"
      operationId: "brickIdGET"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/Brick"
      x-swagger-router-controller: "Brick"
    delete:
      tags:
      - "brick"
      summary: "Delete specific brick by id"
      operationId: "brickIdDELETE"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        "200":
          description: "ok"
      x-swagger-router-controller: "Brick"
  /brick:
    post:
      tags:
      - "brick"
      summary: "Add a new brick"
      description: ""
      operationId: "addBrick"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Brick object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Brick"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/Brick"
      security:
      - brillder_auth:
        - "write:bricks"
        - "read:bricks"
      x-swagger-router-controller: "Brick"
    put:
      tags:
      - "brick"
      summary: "Update an existing brick"
      description: ""
      operationId: "updateBrick"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Brick object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Brick"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/Brick"
      security:
      - brillder_auth:
        - "write:bricks"
        - "read:bricks"
      x-swagger-router-controller: "Brick"
securityDefinitions:
  brillder_auth:
    type: "oauth2"
    authorizationUrl: "https://example.com/oauth/authorize"
    flow: "implicit"
    scopes:
      write:bricks: "modify bricks in your account"
      read:bricks: "read your bricks"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  ArrayOfBricks:
    type: "array"
    items:
      $ref: "#/definitions/Brick"
  ArrayOfBrickAttempts:
    type: "array"
    items:
      $ref: "#/definitions/BrickAttempt"
  ArrayOfQuestions:
    type: "array"
    items:
      $ref: "#/definitions/Question"
  Question:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      order:
        type: "integer"
        format: "int64"
      contentBlocks:
        type: "string"
      questionType:
        type: "string"
        enum:
        - "None"
        - "ShortAnswer"
        - "ChooseOne"
        - "ChooseSeveral"
        - "VerticalShuffle"
        - "HorizontalShuffle"
        - "PairMatch"
        - "Categorise"
        - "MissingWord"
        - "WordHighlighting"
        - "LineHighlighting"
    xml:
      name: "Question"
    example:
      contentBlocks: "contentBlocks"
      id: 6
      questionType: "None"
      order: 1
  Brick:
    type: "object"
    required:
    - "questions"
    - "subTopic"
    - "subject"
    - "title"
    - "type"
    properties:
      id:
        type: "integer"
        format: "int64"
      brickLength:
        type: "string"
        enum:
        - "0"
        - "20"
        - "40"
        - "60"
      type:
        type: "string"
        enum:
        - "Main"
      subject:
        type: "string"
      locked:
        type: "boolean"
      alternativeSubject:
        type: "string"
      topic:
        type: "string"
      subTopic:
        type: "string"
      alternativeTopics:
        type: "string"
      title:
        type: "string"
      brief:
        type: "string"
      prep:
        type: "string"
      synthesis:
        type: "string"
      revisionLog:
        type: "string"
      openQuestion:
        type: "string"
      questions:
        type: "array"
        items:
          $ref: "#/definitions/Question"
    xml:
      name: "Brick"
    example:
      alternativeSubject: "alternativeSubject"
      subTopic: "subTopic"
      brief: "brief"
      synthesis: "synthesis"
      openQuestion: "openQuestion"
      subject: "subject"
      questions:
      - contentBlocks: "contentBlocks"
        id: 6
        questionType: "None"
        order: 1
      - contentBlocks: "contentBlocks"
        id: 6
        questionType: "None"
        order: 1
      revisionLog: "revisionLog"
      type: "Main"
      title: "title"
      brickLength: "0"
      alternativeTopics: "alternativeTopics"
      topic: "topic"
      prep: "prep"
      id: 0
      locked: true
  ComponentAttempt:
    type: "object"
    properties:
      answer:
        type: "object"
        properties: {}
      correct:
        type: "boolean"
      marks:
        type: "number"
      maxMarks:
        type: "number"
  BrickAttempt:
    type: "object"
    properties:
      brickId:
        type: "integer"
        format: "int64"
      score:
        type: "integer"
        format: "int64"
      oldScore:
        type: "integer"
        format: "int64"
      maxScore:
        type: "integer"
        format: "int64"
      studentId:
        type: "integer"
        format: "int64"
      answers:
        type: "array"
        items:
          $ref: "#/definitions/ComponentAttempt"
    xml:
      name: "BrickAttempt"
  Subject:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Subject"
    example:
      name: "name"
      id: 5
  User:
    type: "object"
    properties:
      createBricks:
        type: "array"
        items:
          $ref: "#/definitions/Brick"
      editedBricks:
        type: "array"
        items:
          $ref: "#/definitions/Brick"
      subjects:
        type: "array"
        items:
          $ref: "#/definitions/Subject"
      email:
        type: "string"
      firstName:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      lastName:
        type: "string"
      tutorialPassed:
        type: "boolean"
      type:
        type: "integer"
    xml:
      name: "User"
    example:
      editedBricks:
      - alternativeSubject: "alternativeSubject"
        subTopic: "subTopic"
        brief: "brief"
        synthesis: "synthesis"
        openQuestion: "openQuestion"
        subject: "subject"
        questions:
        - contentBlocks: "contentBlocks"
          id: 6
          questionType: "None"
          order: 1
        - contentBlocks: "contentBlocks"
          id: 6
          questionType: "None"
          order: 1
        revisionLog: "revisionLog"
        type: "Main"
        title: "title"
        brickLength: "0"
        alternativeTopics: "alternativeTopics"
        topic: "topic"
        prep: "prep"
        id: 0
        locked: true
      - alternativeSubject: "alternativeSubject"
        subTopic: "subTopic"
        brief: "brief"
        synthesis: "synthesis"
        openQuestion: "openQuestion"
        subject: "subject"
        questions:
        - contentBlocks: "contentBlocks"
          id: 6
          questionType: "None"
          order: 1
        - contentBlocks: "contentBlocks"
          id: 6
          questionType: "None"
          order: 1
        revisionLog: "revisionLog"
        type: "Main"
        title: "title"
        brickLength: "0"
        alternativeTopics: "alternativeTopics"
        topic: "topic"
        prep: "prep"
        id: 0
        locked: true
      firstName: "firstName"
      lastName: "lastName"
      subjects:
      - name: "name"
        id: 5
      - name: "name"
        id: 5
      createBricks:
      - alternativeSubject: "alternativeSubject"
        subTopic: "subTopic"
        brief: "brief"
        synthesis: "synthesis"
        openQuestion: "openQuestion"
        subject: "subject"
        questions:
        - contentBlocks: "contentBlocks"
          id: 6
          questionType: "None"
          order: 1
        - contentBlocks: "contentBlocks"
          id: 6
          questionType: "None"
          order: 1
        revisionLog: "revisionLog"
        type: "Main"
        title: "title"
        brickLength: "0"
        alternativeTopics: "alternativeTopics"
        topic: "topic"
        prep: "prep"
        id: 0
        locked: true
      - alternativeSubject: "alternativeSubject"
        subTopic: "subTopic"
        brief: "brief"
        synthesis: "synthesis"
        openQuestion: "openQuestion"
        subject: "subject"
        questions:
        - contentBlocks: "contentBlocks"
          id: 6
          questionType: "None"
          order: 1
        - contentBlocks: "contentBlocks"
          id: 6
          questionType: "None"
          order: 1
        revisionLog: "revisionLog"
        type: "Main"
        title: "title"
        brickLength: "0"
        alternativeTopics: "alternativeTopics"
        topic: "topic"
        prep: "prep"
        id: 0
        locked: true
      id: 5
      type: 2
      tutorialPassed: true
      email: "email"
  BrickAttemptUpdateModel:
    type: "object"
    properties:
      id:
        type: "string"
      body:
        $ref: "#/definitions/BrickAttempt"
  BrickSummaryModel:
    type: "object"
    properties:
      totalUsers:
        type: "integer"
      averageScore:
        type: "integer"
      highScore:
        type: "integer"
      brick:
        $ref: "#/definitions/Brick"
    example:
      highScore: 1
      totalUsers: 0
      brick:
        alternativeSubject: "alternativeSubject"
        subTopic: "subTopic"
        brief: "brief"
        synthesis: "synthesis"
        openQuestion: "openQuestion"
        subject: "subject"
        questions:
        - contentBlocks: "contentBlocks"
          id: 6
          questionType: "None"
          order: 1
        - contentBlocks: "contentBlocks"
          id: 6
          questionType: "None"
          order: 1
        revisionLog: "revisionLog"
        type: "Main"
        title: "title"
        brickLength: "0"
        alternativeTopics: "alternativeTopics"
        topic: "topic"
        prep: "prep"
        id: 0
        locked: true
      averageScore: 6
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  body:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  body_1:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  body_2:
    type: "object"
    required:
    - "confirmPassword"
    - "email"
    - "password"
    properties:
      email:
        type: "string"
      password:
        type: "string"
      confirmPassword:
        type: "string"
externalDocs:
  description: "Find out more about Brillder"
  url: "https://github.com/Scholar-6/brillder"
